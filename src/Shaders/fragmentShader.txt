#version 400 core

in vec2 pass_textureCoords;
in vec3 toLightVector[4];
in vec3 surfaceNormal;
in vec3 toCameraVector;

out vec4 out_color;

uniform sampler2D textureSampler;

uniform vec3 lightColor[4];
uniform vec3 attenuation[4];
uniform vec3 cameraFacingDirection;

uniform float reflectivity;
uniform float shineDamper;
uniform float highlighted;
uniform float skipSpecular;

void main(){	
	
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitToCameraVector = normalize(toCameraVector);	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i = 0; i < 4; i++){
		float distance = length(toLightVector[i]);
		float attenuationFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * distance * distance);
		
		//DIFFUSE LIGHTING
		vec3 unitToLightVector = normalize(toLightVector[i]);
		float dotProd = dot(unitNormal,unitToLightVector);
		float brightness = max(dotProd, 0.0);
		totalDiffuse = totalDiffuse + (brightness * lightColor[i]) / attenuationFactor;		
		
		//SPECULAR LIGHTING		
		vec3 lightDirection = -unitToLightVector;
		vec3 reflectedLight = reflect(lightDirection,unitNormal);
		float specularFactor = dot(reflectedLight, unitToCameraVector);
		specularFactor = max(specularFactor, 0.0);
		float dampedSpecular = pow(specularFactor, shineDamper);	
		totalSpecular = totalSpecular + (dampedSpecular * reflectivity * lightColor[i]) / attenuationFactor;
	
	}
	
	totalDiffuse = max(totalDiffuse, 0.2);
	totalSpecular = max(totalSpecular,0.2);
	
	if(skipSpecular > 0.5){
		totalSpecular = vec3(0.0);
	}
	
	vec3 highlightColor = vec3(0.0);
	if(highlighted > 0.5){
		highlightColor = vec3(0.5,0.5,0);
	}
	
	vec4 textureColor = texture(textureSampler, pass_textureCoords);	
	if(textureColor.a < 0.5){
		discard;
	}
	
	
	
	out_color = vec4(totalDiffuse, 1.0) * textureColor + vec4(totalSpecular,1.0) + vec4(highlightColor,1.0);

}